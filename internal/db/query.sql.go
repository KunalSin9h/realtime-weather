// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWeatherData = `-- name: AddWeatherData :exec
INSERT INTO weather_data (
    time, city_id, temperature, feels_like, humidity, wind_speed, condition_id
) VALUES (
  $1, $2, $3, $4, $5, $6, (
        SELECT id FROM weather_conditions WHERE condition = $7
    )
)
`

type AddWeatherDataParams struct {
	Time        pgtype.Timestamptz
	CityID      int32
	Temperature pgtype.Numeric
	FeelsLike   pgtype.Numeric
	Humidity    pgtype.Numeric
	WindSpeed   pgtype.Numeric
	Condition   string
}

func (q *Queries) AddWeatherData(ctx context.Context, arg AddWeatherDataParams) error {
	_, err := q.db.Exec(ctx, addWeatherData,
		arg.Time,
		arg.CityID,
		arg.Temperature,
		arg.FeelsLike,
		arg.Humidity,
		arg.WindSpeed,
		arg.Condition,
	)
	return err
}

const createAlertThreshold = `-- name: CreateAlertThreshold :exec
INSERT INTO alert_thresholds (
    name,
    city_id,
    min_temperature,
    max_temperature,
    min_humidity,
    max_humidity,
    min_wind_speed,
    max_wind_speed,
    occur_limit,
    condition_id
) VALUES (
    $1,
    $2,
    $3,
    $4,
    $5,
    $6,
    $7,
    $8,
    $9,
    (
        SELECT id FROM weather_conditions WHERE condition = $10
    )
)
`

type CreateAlertThresholdParams struct {
	Name           string
	CityID         int32
	MinTemperature pgtype.Numeric
	MaxTemperature pgtype.Numeric
	MinHumidity    pgtype.Numeric
	MaxHumidity    pgtype.Numeric
	MinWindSpeed   pgtype.Numeric
	MaxWindSpeed   pgtype.Numeric
	OccurLimit     int32
	Condition      string
}

// ALERTS
func (q *Queries) CreateAlertThreshold(ctx context.Context, arg CreateAlertThresholdParams) error {
	_, err := q.db.Exec(ctx, createAlertThreshold,
		arg.Name,
		arg.CityID,
		arg.MinTemperature,
		arg.MaxTemperature,
		arg.MinHumidity,
		arg.MaxHumidity,
		arg.MinWindSpeed,
		arg.MaxWindSpeed,
		arg.OccurLimit,
		arg.Condition,
	)
	return err
}

const deleteAlertThreshold = `-- name: DeleteAlertThreshold :exec
UPDATE alert_thresholds SET active = false WHERE id = $1
`

func (q *Queries) DeleteAlertThreshold(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteAlertThreshold, id)
	return err
}

const getAllCities = `-- name: GetAllCities :many

SELECT id, name, latitude, longitude FROM cities
`

// Manually Refresh the daily_weather_summary_view of past 1 hour
// CITIES
func (q *Queries) GetAllCities(ctx context.Context) ([]City, error) {
	rows, err := q.db.Query(ctx, getAllCities)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []City
	for rows.Next() {
		var i City
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Latitude,
			&i.Longitude,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTodayWeatherSummary = `-- name: GetTodayWeatherSummary :one
SELECT get_latest_daily_summary FROM get_latest_daily_summary($1)
`

func (q *Queries) GetTodayWeatherSummary(ctx context.Context, cityIDParam int32) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTodayWeatherSummary, cityIDParam)
	var get_latest_daily_summary interface{}
	err := row.Scan(&get_latest_daily_summary)
	return get_latest_daily_summary, err
}

const refreshDailyWeatherSummary = `-- name: RefreshDailyWeatherSummary :exec
CALL refresh_continuous_aggregate('daily_weather_summary_view', localtimestamp - INTERVAL '1 hour', localtimestamp)
`

func (q *Queries) RefreshDailyWeatherSummary(ctx context.Context) error {
	_, err := q.db.Exec(ctx, refreshDailyWeatherSummary)
	return err
}
