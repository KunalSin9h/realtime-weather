// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const addWeatherData = `-- name: AddWeatherData :exec
INSERT INTO weather_data (
    time, city_id, condition_id, temperature, feels_like, humidity, wind_speed
) VALUES (
  $1, $2, $3, $4, $5, $6, $7
)
`

type AddWeatherDataParams struct {
	Time        pgtype.Timestamptz
	CityID      int32
	ConditionID int32
	Temperature pgtype.Numeric
	FeelsLike   pgtype.Numeric
	Humidity    pgtype.Numeric
	WindSpeed   pgtype.Numeric
}

func (q *Queries) AddWeatherData(ctx context.Context, arg AddWeatherDataParams) error {
	_, err := q.db.Exec(ctx, addWeatherData,
		arg.Time,
		arg.CityID,
		arg.ConditionID,
		arg.Temperature,
		arg.FeelsLike,
		arg.Humidity,
		arg.WindSpeed,
	)
	return err
}

const getTodayWeatherSummary = `-- name: GetTodayWeatherSummary :one
SELECT get_latest_daily_summary FROM get_latest_daily_summary($1)
`

func (q *Queries) GetTodayWeatherSummary(ctx context.Context, cityIDParam int32) (interface{}, error) {
	row := q.db.QueryRow(ctx, getTodayWeatherSummary, cityIDParam)
	var get_latest_daily_summary interface{}
	err := row.Scan(&get_latest_daily_summary)
	return get_latest_daily_summary, err
}

const refreshDailyWeatherSummary = `-- name: RefreshDailyWeatherSummary :exec
CALL refresh_continuous_aggregate('daily_weather_summary_view', localtimestamp - INTERVAL '1 hour', localtimestamp)
`

func (q *Queries) RefreshDailyWeatherSummary(ctx context.Context) error {
	_, err := q.db.Exec(ctx, refreshDailyWeatherSummary)
	return err
}
